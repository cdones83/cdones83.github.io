---
layout: post
title:  "Blog_5"
date:   2020-10-09 4:27:38 -0700
categories: virtual machine ubuntu docker Dockerfile
---

Welcome back! This is Blog_5 and this week I will be talking about docker and Dockerfiles. So what is
docker and what can we do with it? Docker is an application that lets us create containers that have
everything we need to run other applications. In a way it's almost like the virtual machine I am currently
using to create these posts. We take an image of what we want, and in this case an image refers to what
the container will have already downloaded on to it for us to begin using it. There are presets we can
call on or we can make our very own with what are called Dockerfiles. They contain the base OS image for
the container to install and we put in ourn own commands to install any other application or software
we might want when we build the container.

Let's get started with installing docker. Luckily for us we can use a pre-installed command called snap.
The command will look like this:
```
snap install docker
```
Simple right? Snap, like apt-get, will search it's libraries for the files we need to get docker up and
running. Once it is finished, we will now be able to use the docker commands.

Let's go over a few simple ones.
```
docker ps -a
```
This command will show us all the containers we currently have. The -a means it shows everything whether
the container is running or stopped. Obviously if we run it now we the result would be pretty empty.

We can make a container using the run command:
```
docker run -it --name <name of container> ubuntu:18.04 bash
```
There are a couple of extra options we've tacked onto it so let's breakdown the command. Right after the
run command we have the option -it. This creates and interactable terminal for us to use when the
container is created. After that we have --name which allows use to personally name the container. When a
container is made without this option, docker will give a randomly generated name like affectione or
golden_goose or some other silly name. It can be changed but it is much easier to name it now. Next we
give it the OS to run. in our case Ubuntu 18.04. You can give it the latest version of Ubuntu and in this
case I just used an older version because it is what I was using in a lab for my current class. At the
end is bash which runs the bash command once the container is created.

Once we do the run command we should automatically be put into our new container as root:

![Docker container](https://i.imgur.com/v9tFqgY.png)

In this I did a quick ls to show that the container has files within it already pre-installed.

You can type "exit" to leave the container and return to your original terminal. If you ever need to
stop the container for any reason we can use this command:
```
docker stop <name of container>
```
As well use the start command (just replace stop with start) to get it back running again. After exiting
the container we can also go back into it using:
```
docker exec -it <name of container> bash
```
Inside of there containers we can create LAMP stacks like we talked about i previous blogs or even
experiment with other things.


