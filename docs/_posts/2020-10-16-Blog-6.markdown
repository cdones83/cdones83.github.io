---
layout: post
title:  "Blog_6"
date:   2020-10-16 4:29:38 -0700
categories: virtual machine ubuntu docker dockerfile
---
Hi there and welcome back to my blog series! If you were here last week you will remember that I covered
docker in my last post. I touched very briefly on images in that last post and how when spinning up a new
container in docker it pulls from an image of Ubuntu when being created. Now with Dockerfiles we will not
only be able to install a default Ubuntu for our container, but we can also do things such as have each
new container come pre-installed with applications of our choice. With that let's get started with this
week's blog.

So we now know what a Dockerfile can do for us but what actualliy is it? A Dockerfile is simply a text
file that we can create using nano or any other text editor of our choice. The command that we will be
using to call on this file is as follows:
```
docker build -t <name of image> .
```
When breaking it down the -t let's us give a name to the image we are creating. At the end you will notice
the "." which means that where ever we currently are in our files is where it will look for our
Dockerfile. We can not have more than one Dockerfile per location. The file must also be named
"Dockerfile" or else the command will give you an error. If you would like to have multiple Dockerfiles
then you would have to put each one into another directory and call upon each path depending on which one
you would like to create an image with. Alternatively you, could also just cd into the proper directory
and stick with the command used above.

Now let's talk about what goes into a Dockerfile. Below is a picture of an example Dockerfile from my
recent lab.

![Dockerfile example](https://i.imgur.com/ZIsKh5V.png)

All Dockerfiles start with FROM at the top. Essentially we are taking a base image and then adding onto
it with whatever we would like it to download. In the case of the example above, It is pulling up an image
of Ubuntu 18.04. Now below that is where we begin to have it download our desired applications. When doing
so we use the RUN command as shown in the example above. After the base image is downloaded any command 
following RUN will then be executed automatically. As it excutes our commands it is important to note
that no user input will be possible. For any command that would have us input a yes, no, or anything else,
we must have already put in something to cover that for us such as the -y option for the apt-get command.

Below is a COPY command. Let's say there is a file that you would like to make change to in the new image
but want it to already have been updated by the time you create a container. By using the COPY command, if
you already have an updated version of the file, you can get it to replace the existing file in the target
location of your choice when the container is created.

Once the command has been run and if each step has completed without fail then you can run the following
command:
```
docker run --rm -it <NAME OF IMAGE> /bin/bash
```
This will create a container with a random name since we didn't give it the option to name it manually as
well as delete the container (that's the --rm option) once it has been exited.Opening it up you will be
able to use any of the commands from the applications you had installed for the image you created. I
believe I gave this xample in the last blog but again, this is very useful if you wanted to spin up
multiple containers preinstalled and adjusted to have working LAMP stacks.

That's it for Dockerfiles. That is more or less about as much as I know wbout them at the moment. As
always I hope this helped you if you were also trying to figure out how they worked and I hope to see you
in my next blog.
