---
layout: post
title:  "Blog_8"
date:   2020-10-30 6:57:38 -0700
categories: ansible playbook
---
## Intro
Welcome back to my series for CIT480! This week I will be talking about ansible. Now that I've done the
lab for my class, I have a better understanding of it and feel like I can properly talk about it. So as
always, what is it? Remember Dockerfiles? Ansible is like that, except it's a separate installation and
uses its own commands. With it we can create a file that automatically begins to download and setup
applications for our newly created container. I think I prefer using Dockerfile just because we create a
base image, but it never hurts to know multiple ways to speed up an installation. Let's get started.

### Installing Ansible
Hands down the easiest part in the whole process. A simple `apt install` or `apt-get install` command
will get the job done like so:

```
apt install ansible
```

It's important to remember that when doing this we will have already created a container to run the file
in. If you cannot remember how to make a container using Docker then you can always refer back to [Blog_5](https://cdones83.github.io/virtual/machine/ubuntu/docker/2020/10/09/Blog-5.html).
Well now it should be installed so let's move on.

### Creating The YML File
Before we make the actual file we need to create a directory first. This directory will be located in
/home. Go ahead and `cd` to move to home or create the directory directly as shown below in the following
code:

```
mkdir -p /home/ansible
```

The -p means that it will create a parent directory first if it does not already exist. Then move into the
directory. Just as a side note we did not have to name this directory "ansible". You can name it however
you like. Now from within this directory we can create our file. Name it however you like as long as
it ends with ".yml". You can use any editor of your choice as well. Now we can proceed to setting up the
file.

### Setting Up The YML File
Below is an example of a file that installs `curl`.

```
---
-hosts: 127.0.0.1
 connection: localhost

 tasks:
  - name: Install curl
    apt: name=curl state=present
```
All YML files begin with "---" at the top. below it is then host. Since we are using a container in docker
we use 127.0.0.1. and our connection is localhost. Now we move onto tasks. Every task MUST have two spaces
after it. This applies to any item that contains multiple levels. Ansible Playbook is very sensitive
when it comes to indentation so be careful when creating your files. Tasks is the parent level. Every new
task will begin with "name" which is on the next level. You can write out what the task is doing and when
you run the playbook that is what it will say when working on that task. Next is the module we will be
using for the task. In this case it is "apt". Since we are only installing curl we can put the name of
the program we are installing on the same line as "apt". IT's followed by "state" which is the version
of the program being installed. By saying "present" we are having it download the latest version.

### Running the Playbook
The command to run it is simple and goes as such:

```
ansible-playbook <NAME OF FILE>
```
From there it will first gather facts on the file. This means it is making sure everything is properly
spaced and all commands within the file are valid. Then it will begin running your tasks. In this case it
will only be installing curl so it won't take long. It doesn't give your a percent for where it currently
is in the installation so just be patient, if it hasn't given you an error it is working on it. Now it
should be finished and curl has been installed.

### See Ya Next Time
That's the basic of it. Maybe next time I'll talk about installing more and using lists but for basics
this is enough to get you started. As always I hope this helped anyone struggling and feel free to tune in
next week to read more helpful guides.
